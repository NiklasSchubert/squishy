{% extends 'base.html' %}

{% block title %}{{ show.display_name }} - Squishy{% endblock %}

{% block content %}
<div class="show-detail">
    <div class="back-button-container">
        <a href="{{ url_for('ui.index') }}" class="button back-button">‚Üê Back to Home</a>
    </div>

    <div class="show-header">
        {% if show.poster_url %}
        <img src="{{ show.poster_url }}" alt="{{ show.title }}" class="show-poster">
        {% else %}
        <div class="placeholder-poster large">
            <span>{{ show.title[0] }}</span>
        </div>
        {% endif %}

        <div class="show-info">
            <h1>{{ show.display_name }}</h1>

            <div class="media-meta">
                <span class="media-type-pill tv-type">TV Show</span>
                <span class="seasons-pill">{{ show.seasons|length }} Season{% if show.seasons|length != 1 %}s{% endif %}</span>
                <span class="episodes-pill">
                    {{ episode_count }} Episode{% if episode_count != 1 %}s{% endif %}
                </span>
            </div>

            <p class="media-description">
                {% if show.overview %}
                    {{ show.overview }}
                {% else %}
                    {{ show.title }} {% if show.year %}({{ show.year }}){% endif %} -
                    A television series with {{ show.seasons|length }} season{% if show.seasons|length != 1 %}s{% endif %}.
                {% endif %}
            </p>

            {% if show.genres or show.creators or show.actors or show.first_air_date or show.rating or show.content_rating or show.studio %}
            <div class="media-metadata">
                {% if show.genres %}
                <div class="metadata-item">
                    <span class="metadata-label">Genres:</span>
                    <span class="metadata-value">{{ show.genres|join(', ') }}</span>
                </div>
                {% endif %}

                {% if show.creators %}
                <div class="metadata-item">
                    <span class="metadata-label">Creator{% if show.creators|length > 1 %}s{% endif %}:</span>
                    <span class="metadata-value">{{ show.creators|join(', ') }}</span>
                </div>
                {% endif %}

                {% if show.actors %}
                <div class="metadata-item">
                    <span class="metadata-label">Cast:</span>
                    <span class="metadata-value">{{ show.actors|join(', ') }}</span>
                </div>
                {% endif %}

                {% if show.first_air_date %}
                <div class="metadata-item">
                    <span class="metadata-label">First Aired:</span>
                    <span class="metadata-value">{{ show.first_air_date[:10] }}</span>
                </div>
                {% endif %}

                {% if show.rating %}
                <div class="metadata-item">
                    <span class="metadata-label">Rating:</span>
                    <span class="metadata-value">{{ '%0.1f'|format(show.rating) }}/10</span>
                </div>
                {% endif %}

                {% if show.content_rating %}
                <div class="metadata-item">
                    <span class="metadata-label">Content Rating:</span>
                    <span class="metadata-value">{{ show.content_rating }}</span>
                </div>
                {% endif %}

                {% if show.studio %}
                <div class="metadata-item">
                    <span class="metadata-label">Studio:</span>
                    <span class="metadata-value">{{ show.studio }}</span>
                </div>
                {% endif %}
            </div>
            {% endif %}
        </div>
    </div>

    <div class="seasons-container">
        {% for season in show.sorted_seasons %}
        <div class="season-block" id="season-{{ season.number }}">
            <h2 class="season-title">{{ season.display_name }}</h2>

            <div class="episodes-list">
                {% for episode in season.sorted_episodes %}
                <div class="episode-item card">
                    <div class="episode-info">
                        <h3 class="episode-title">{{ episode.display_name }}</h3>

                        {% if episode.overview %}
                        <p class="episode-overview">{{ episode.overview }}</p>
                        {% endif %}

                        {% if episode.air_date %}
                        <p class="episode-air-date">Aired: {{ episode.air_date[:10] }}</p>
                        {% endif %}

                        <div class="episode-technical-info">
                            {% if episode.id in valid_episode_ids %}
                            <div style="display: flex; gap: 10px;">
                                <button class="toggle-info-btn button secondary small" data-episode-id="{{ episode.id }}" data-path="{{ episode.path }}">Show Technical Info</button>
                                <button onclick="debugTestAPI('{{ episode.id }}')" class="button secondary small" style="font-size: 0.8em;">Test API</button>
                            </div>
                            {% else %}
                            <button class="button secondary small" disabled title="Technical info not available for this episode">No Technical Info Available</button>
                            {% endif %}

                            <div id="technical-info-{{ episode.id }}" class="technical-info" style="display: none;">
                                <!-- Technical info will be loaded here via API -->
                                <div class="loading-container tech-loading">
                                    <div class="loading-spinner"></div>
                                    <p>Loading technical information...</p>
                                </div>
                                <div class="tech-content" style="display: none;">
                                    <!-- Content will be filled dynamically -->
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="episode-actions">
                        <form action="{{ url_for('ui.transcode', media_id=episode.id) }}" method="post" class="transcode-form">
                            <div class="form-group">
                                <select id="profile-{{ episode.id }}" name="profile" required>
                                    {% for name, profile in profiles.items() %}
                                    <option value="{{ name }}">{{ name }} ({{ profile.resolution }}, {{ profile.codec }})</option>
                                    {% endfor %}
                                </select>
                            </div>
                            <button type="submit">Squish</button>
                        </form>
                    </div>
                </div>
                {% endfor %}
            </div>
        </div>
        {% endfor %}
    </div>
</div>

<style>
.episode-technical-info {
    margin-top: 0.5rem;
}

.toggle-info-btn {
    margin-top: 0.5rem;
}

.technical-info {
    margin-top: 1rem;
}

.technical-info h4 {
    margin: 1rem 0 1rem;
    color: var(--dark-color);
    font-size: 1.1rem;
}

.tech-card {
    background-color: white;
    border-radius: 5px;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    padding: 1rem;
    margin-bottom: 1rem;
}

.tech-card:last-child {
    margin-bottom: 0;
}

.tech-card table {
    width: 100%;
    border-collapse: collapse;
}

.tech-card table th,
.tech-card table td {
    padding: 0.5rem;
    text-align: left;
    border-bottom: 1px solid #eee;
}

.tech-card table th {
    width: 30%;
    font-weight: bold;
    color: var(--dark-color);
}

.separator {
    margin: 1rem 0;
    border-top: 1px dashed #ddd;
}

.episode-item {
    margin-bottom: 1rem;
    padding: 1rem;
}

.episode-title {
    margin-bottom: 0.5rem;
    color: var(--primary-color);
}

.episode-overview {
    margin: 0.5rem 0;
    color: #555;
    font-size: 0.9rem;
    line-height: 1.4;
}

.episode-air-date {
    margin: 0.5rem 0;
    color: #777;
    font-size: 0.8rem;
    font-style: italic;
}

.season-title {
    margin-bottom: 1rem;
}

/* New styles for the show header */
.show-header {
    align-items: flex-start;
}

.show-info h1 {
    margin-top: 0;
    margin-bottom: 0.5rem;
}

.media-meta {
    display: flex;
    gap: 0.5rem;
    margin-bottom: 1rem;
    flex-wrap: wrap;
}

.media-type-pill,
.seasons-pill,
.episodes-pill {
    display: inline-block;
    padding: 0.25rem 0.75rem;
    border-radius: 20px;
    font-size: 0.8rem;
    font-weight: 500;
}

.tv-type {
    background-color: #9b59b625;
    color: #9b59b6;
}

.seasons-pill {
    background-color: #3498db25;
    color: #3498db;
}

.episodes-pill {
    background-color: #27ae6025;
    color: #27ae60;
}

.media-description {
    margin-bottom: 1rem;
    color: #555;
    line-height: 1.5;
}

.media-metadata {
    margin-bottom: 1.5rem;
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 0.5rem 1rem;
}

.metadata-item {
    display: flex;
    align-items: baseline;
}

.metadata-label {
    font-weight: 500;
    color: var(--dark-color);
    margin-right: 0.5rem;
    white-space: nowrap;
}

.metadata-value {
    color: #555;
}

/* Loading spinner for technical information */
.loading-container.tech-loading {
    padding: 1rem;
}

.loading-spinner {
    border: 4px solid rgba(0, 0, 0, 0.1);
    border-radius: 50%;
    border-top: 4px solid var(--secondary-color);
    width: 28px;
    height: 28px;
    animation: spin 1s linear infinite;
    margin-bottom: 0.5rem;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

.error-message {
    padding: 1rem;
    background-color: #ffebee;
    border-radius: 5px;
    color: #d32f2f;
    margin-bottom: 1rem;
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Force a console log to check if logging works
    console.log('SQUISHY DEBUG: Show detail page loaded');
    
    // Add click handler to all technical info toggle buttons
    const toggleButtons = document.querySelectorAll('.toggle-info-btn');
    console.log('SQUISHY DEBUG: Found', toggleButtons.length, 'toggle buttons');
    
    toggleButtons.forEach(button => {
        button.addEventListener('click', function(event) {
            console.log('SQUISHY DEBUG: Button clicked!', this);
            const episodeId = this.getAttribute('data-episode-id');
            console.log('SQUISHY DEBUG: Episode ID:', episodeId);
            toggleTechnicalInfo(episodeId, this);
        });
    });

    // Helper function to create a table row
    function createTableRow(label, value) {
        const row = document.createElement('tr');
        const th = document.createElement('th');
        const td = document.createElement('td');
        
        th.textContent = label;
        td.textContent = value;
        
        row.appendChild(th);
        row.appendChild(td);
        
        return row;
    }

    // Toggle technical information visibility and load if needed
    function toggleTechnicalInfo(episodeId, button) {
        try {
            console.log('SQUISHY DEBUG: toggleTechnicalInfo function called with ID:', episodeId);
            
            const infoDiv = document.getElementById(`technical-info-${episodeId}`);
            console.log('SQUISHY DEBUG: infoDiv element:', infoDiv);
            
            if (!infoDiv) {
                console.error('SQUISHY DEBUG: Could not find technical info div with ID:', `technical-info-${episodeId}`);
                return;
            }
            
            const techContent = infoDiv.querySelector('.tech-content');
            const loadingElement = infoDiv.querySelector('.loading-container');
            
            const currentDisplay = window.getComputedStyle(infoDiv).display;
            console.log('SQUISHY DEBUG: Current computed display style:', currentDisplay);
            console.log('SQUISHY DEBUG: Current inline display style:', infoDiv.style.display);
            
            // Check if the element is actually visible (not just the inline style)
            if (currentDisplay === 'none') {
                // Show the container and loading indicator
                console.log('SQUISHY DEBUG: Showing technical info');
                infoDiv.style.display = 'block';
                button.textContent = 'Hide Technical Info';
                
                // Check if we already loaded the data
                if (techContent.innerHTML.trim() === '') {
                    try {
                        console.log('SQUISHY DEBUG: Starting data loading process');
                        console.log('SQUISHY DEBUG: Tech content is empty, need to load data');
                        loadingElement.style.display = 'flex';
                        techContent.style.display = 'none';
                        
                        // Since TV show episodes aren't always in the MEDIA dictionary,
                        // We should handle the case where technical info cannot be loaded
                        console.log('SQUISHY DEBUG: Loading technical info for episode:', episodeId);
                        
                        // Attempt to get path directly from the episode
                        const episodePath = button.getAttribute('data-path');
                        console.log('SQUISHY DEBUG: Episode path:', episodePath);
                    
                        // If we don't have a valid path, show error immediately
                        if (!episodePath) {
                            techContent.innerHTML = `
                                <div class="error-message">
                                    <p>Cannot load technical information: Episode data not available.</p>
                                </div>
                            `;
                            loadingElement.style.display = 'none';
                            techContent.style.display = 'block';
                            return;
                        }
                        
                        // Fallback to a basic display of what we know
                        techContent.innerHTML = `
                            <h4>File Information</h4>
                            <div class="card tech-card">
                                <table>
                                    <tbody>
                                        <tr>
                                            <th>File Path</th>
                                            <td>${episodePath}</td>
                                        </tr>
                                        <tr>
                                            <th>Technical Info</th>
                                            <td>Not available - episode metadata is limited</td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        `;
                        
                        // Hide loading indicator and show limited content
                        loadingElement.style.display = 'none';
                        techContent.style.display = 'block';
                        
                        // Wrap the fetch call in a try/catch block to catch any errors
                        try {
                            console.log('SQUISHY DEBUG: About to send API request to:', `/api/media/${episodeId}/technical_info`);
                            
                            // Create the fetch request with full URL for clarity
                            const apiUrl = `/api/media/${episodeId}/technical_info`;
                            console.log('SQUISHY DEBUG: Full API URL:', window.location.origin + apiUrl);
                            const fetchPromise = fetch(apiUrl);
                            console.log('SQUISHY DEBUG: Fetch request created');
                            
                            // Add a timeout to detect if fetch hangs
                            const timeoutPromise = new Promise((_, reject) => 
                                setTimeout(() => reject(new Error('Fetch request timed out after 10s')), 10000)
                            );
                            
                            // Race the fetch against the timeout
                            Promise.race([fetchPromise, timeoutPromise])
                                .then(response => {
                                    console.log('SQUISHY DEBUG: Received response status:', response.status);
                                    console.log('SQUISHY DEBUG: Response headers:', 
                                        Array.from(response.headers.entries())
                                            .map(([key, value]) => `${key}: ${value}`)
                                            .join(', ')
                                    );
                                    
                                    if (!response.ok) {
                                        throw new Error(`Failed to load technical information (Status: ${response.status})`);
                                    }
                                    return response.json().catch(e => {
                                        console.error('SQUISHY DEBUG: JSON parse error:', e);
                                        throw new Error('Invalid JSON response');
                                    });
                                })
                                .then(data => {
                                    console.log('SQUISHY DEBUG: Received data:', data);
                                    // Generate the technical info content
                                    techContent.innerHTML = generateTechnicalInfoContent(data, episodeId);
                                    
                                    // Hide loading indicator and show content
                                    loadingElement.style.display = 'none';
                                    techContent.style.display = 'block';
                                })
                                .catch(error => {
                                    console.error('SQUISHY DEBUG: Error fetching technical info:', error);
                                    console.log('SQUISHY DEBUG: Error details:', error.message, error.stack);
                                    
                                    techContent.innerHTML = `
                                        <div class="error-message">
                                            <p>Error loading technical information: ${error.message}</p>
                                            <p>Check browser console for detailed error logs (F12)</p>
                                            <div style="display: flex; gap: 10px; margin-top: 10px;">
                                                <button onclick="retryLoadTechnicalInfo('${episodeId}')" class="button small">Retry</button>
                                                <button onclick="debugTestAPI('${episodeId}')" class="button small secondary">Test API</button>
                                            </div>
                                        </div>
                                    `;
                                    
                                    // Hide loading indicator and show error content
                                    loadingElement.style.display = 'none';
                                    techContent.style.display = 'block';
                                    
                                    // Show notification error if the function exists
                                    if (typeof showNotification === 'function') {
                                        showNotification('Failed to load technical information. Please try again.', 'error');
                                    }
                                });
                        } catch (error) {
                            // This catches errors in the setup of the fetch itself
                            console.error('SQUISHY DEBUG: Critical error setting up fetch:', error);
                            console.log('SQUISHY DEBUG: Critical error details:', error.message, error.stack);
                            
                            techContent.innerHTML = `
                                <div class="error-message">
                                    <p>Critical error setting up request: ${error.message}</p>
                                    <p>Check browser console for detailed error logs (F12)</p>
                                    <div style="display: flex; gap: 10px; margin-top: 10px;">
                                        <button onclick="retryLoadTechnicalInfo('${episodeId}')" class="button small">Retry</button>
                                        <button onclick="debugTestAPI('${episodeId}')" class="button small secondary">Test API</button>
                                    </div>
                                </div>
                            `;
                            
                            // Hide loading indicator and show error content
                            loadingElement.style.display = 'none';
                            techContent.style.display = 'block';
                        }
                    } catch (innerError) {
                        console.error('SQUISHY DEBUG: Inner error in data loading:', innerError);
                        console.log('SQUISHY DEBUG: Inner error details:', innerError.message, innerError.stack);
                        
                        techContent.innerHTML = `
                            <div class="error-message">
                                <p>Error in data loading: ${innerError.message}</p>
                                <p>Check browser console for detailed error logs (F12)</p>
                                <div style="display: flex; gap: 10px; margin-top: 10px;">
                                    <button onclick="retryLoadTechnicalInfo('${episodeId}')" class="button small">Retry</button>
                                    <button onclick="debugTestAPI('${episodeId}')" class="button small secondary">Test API</button>
                                </div>
                            </div>
                        `;
                        
                        // Hide loading indicator and show error content
                        loadingElement.style.display = 'none';
                        techContent.style.display = 'block';
                    }
                } else {
                    // We already have the data, just show it
                    techContent.style.display = 'block';
                }
            } else {
                // Hide the info div
                console.log('SQUISHY DEBUG: Hiding technical info');
                infoDiv.style.display = 'none';
                button.textContent = 'Show Technical Info';
            }
        } catch (fatalError) {
            // This is the top-level catch that will catch any errors that might prevent the fetch
            console.error('SQUISHY DEBUG: FATAL ERROR in toggleTechnicalInfo function:', fatalError);
            console.log('SQUISHY DEBUG: Error stack:', fatalError.stack);
            
            // Try to show an error message if possible
            try {
                const errorDiv = document.createElement('div');
                errorDiv.className = 'error-message';
                errorDiv.innerHTML = `
                    <p>A fatal error occurred in the technical info viewer: ${fatalError.message}</p>
                    <p>Please check browser console for details (F12)</p>
                `;
                
                // Try to insert the error message into the page
                const techInfoContainer = document.querySelector('.episode-technical-info');
                if (techInfoContainer) {
                    techInfoContainer.appendChild(errorDiv);
                }
                
                // Also show a notification if available
                if (typeof showNotification === 'function') {
                    showNotification('Fatal error loading technical information', 'error');
                }
            } catch (e) {
                // Last resort error handling
                console.error('SQUISHY DEBUG: Could not even display error message:', e);
                alert('A fatal error occurred. Please check browser console (F12)');
            }
        }
    }

    // Generate HTML content for technical info
    function generateTechnicalInfoContent(data, episodeId) {
        let html = '';
        
        // File Information section
        html += `
            <h4>File Information</h4>
            <div class="card tech-card">
                <table>
                    <tbody>
                        <tr>
                            <th>File Path</th>
                            <td>${document.querySelector(`button[data-episode-id="${episodeId}"]`).getAttribute('data-path')}</td>
                        </tr>
                        <tr>
                            <th>File Size</th>
                            <td>${data.formatted_file_size || 'Unknown'}</td>
                        </tr>
                        <tr>
                            <th>Format</th>
                            <td>${data.format?.format_name || 'Unknown'}</td>
                        </tr>
                        <tr>
                            <th>Duration</th>
                            <td>${((data.format?.duration || 0) / 60).toFixed(2)} minutes</td>
                        </tr>
                        <tr>
                            <th>Bitrate</th>
                            <td>${((data.format?.bit_rate || 0) / 1000000).toFixed(2)} Mbps</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        `;
        
        // Video section
        if (data.video && data.video.length > 0) {
            html += `<h4>Video</h4>
                <div class="card tech-card">`;
            
            data.video.forEach((video, index) => {
                html += `
                    <table>
                        <tbody>
                            <tr>
                                <th>Codec</th>
                                <td>${video.codec} (${video.codec_description})</td>
                            </tr>
                            <tr>
                                <th>Resolution</th>
                                <td>${video.width}x${video.height}</td>
                            </tr>
                            <tr>
                                <th>Frame Rate</th>
                                <td>${video.frame_rate} fps</td>
                            </tr>
                            <tr>
                                <th>Bit Depth</th>
                                <td>${video.bit_depth} bit</td>
                            </tr>
                        </tbody>
                    </table>
                `;
                
                if (index < data.video.length - 1) {
                    html += '<div class="separator"></div>';
                }
            });
            
            html += '</div>';
        }
        
        // HDR section
        if (data.hdr_info) {
            html += `
                <h4>HDR Information</h4>
                <div class="card tech-card">
                    <table>
                        <tbody>
                            <tr>
                                <th>HDR Type</th>
                                <td>${data.hdr_info.type || 'Unknown'}</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            `;
        }
        
        // Audio section
        if (data.audio && data.audio.length > 0) {
            html += `<h4>Audio</h4>
                <div class="card tech-card">`;
            
            data.audio.forEach((audio, index) => {
                html += `
                    <table>
                        <tbody>
                            <tr>
                                <th>Codec</th>
                                <td>${audio.codec}</td>
                            </tr>
                            <tr>
                                <th>Channels</th>
                                <td>${audio.channels} (${audio.channel_layout})</td>
                            </tr>
                            ${audio.language ? `
                            <tr>
                                <th>Language</th>
                                <td>${audio.language}</td>
                            </tr>
                            ` : ''}
                        </tbody>
                    </table>
                `;
                
                if (index < data.audio.length - 1) {
                    html += '<div class="separator"></div>';
                }
            });
            
            html += '</div>';
        }
        
        // Subtitle section
        if (data.subtitle && data.subtitle.length > 0) {
            html += `<h4>Subtitles</h4>
                <div class="card tech-card">`;
            
            data.subtitle.forEach((subtitle, index) => {
                html += `
                    <table>
                        <tbody>
                            <tr>
                                <th>Codec</th>
                                <td>${subtitle.codec}</td>
                            </tr>
                            ${subtitle.language ? `
                            <tr>
                                <th>Language</th>
                                <td>${subtitle.language}</td>
                            </tr>
                            ` : ''}
                            ${subtitle.title ? `
                            <tr>
                                <th>Title</th>
                                <td>${subtitle.title}</td>
                            </tr>
                            ` : ''}
                        </tbody>
                    </table>
                `;
                
                if (index < data.subtitle.length - 1) {
                    html += '<div class="separator"></div>';
                }
            });
            
            html += '</div>';
        }
        
        return html;
    }
});

// Global function to retry loading technical info
function retryLoadTechnicalInfo(episodeId) {
    const button = document.querySelector(`button[data-episode-id="${episodeId}"]`);
    if (button) {
        // Reset the display state
        const infoDiv = document.getElementById(`technical-info-${episodeId}`);
        const techContent = infoDiv.querySelector('.tech-content');
        techContent.innerHTML = '';
        
        // Trigger the load again
        button.click();
    }
}

// Debug function to test API reachability
function debugTestAPI(episodeId) {
    console.log('SQUISHY DEBUG: Testing API reachability for:', episodeId);
    
    // Show a message that we're testing
    const debugMsg = document.createElement('div');
    debugMsg.className = 'debug-message';
    debugMsg.style.padding = '10px';
    debugMsg.style.margin = '10px 0';
    debugMsg.style.backgroundColor = '#f0f0f0';
    debugMsg.style.border = '1px solid #ccc';
    debugMsg.style.borderRadius = '5px';
    debugMsg.innerHTML = '<p>Testing API reachability... Check console (F12)</p>';
    
    // Try to insert the message into the page near the current episode
    const button = document.querySelector(`button[data-episode-id="${episodeId}"]`);
    if (button) {
        const container = button.closest('.episode-technical-info');
        if (container) {
            container.appendChild(debugMsg);
        }
    }
    
    // Test the API endpoint with a direct XMLHttpRequest to see if CORS is an issue
    const apiUrl = `/api/media/${episodeId}/technical_info`;
    console.log('SQUISHY DEBUG: Testing URL:', window.location.origin + apiUrl);
    
    const xhr = new XMLHttpRequest();
    xhr.open('GET', apiUrl, true);
    
    xhr.onreadystatechange = function() {
        console.log('SQUISHY DEBUG: XHR State:', xhr.readyState, 'Status:', xhr.status);
        if (xhr.readyState === 4) {
            if (xhr.status === 200) {
                console.log('SQUISHY DEBUG: API is reachable!');
                console.log('SQUISHY DEBUG: Response:', xhr.responseText);
                debugMsg.innerHTML += '<p style="color:green">‚úì API is reachable! Response received.</p>';
            } else {
                console.log('SQUISHY DEBUG: API returned error:', xhr.status);
                console.log('SQUISHY DEBUG: Response text:', xhr.responseText);
                debugMsg.innerHTML += `<p style="color:red">‚úó API error: ${xhr.status} ${xhr.statusText}</p>`;
            }
        }
    };
    
    xhr.onerror = function(e) {
        console.error('SQUISHY DEBUG: XHR Error:', e);
        debugMsg.innerHTML += '<p style="color:red">‚úó Network error accessing API</p>';
    };
    
    xhr.send();
    console.log('SQUISHY DEBUG: XHR request sent');
}
</script>
{% endblock %}